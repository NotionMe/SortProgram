using System;
using Avalonia.Controls;
using Avalonia.Interactivity;
using Practika2_OPAM_Ubohyi_Stanislav.Pages;
using Avalonia.Styling;
using Avalonia.Media;
using Avalonia;
using System.Diagnostics;
using Practika2_OPAM_Ubohyi_Stanislav.Styles;
using Avalonia.Input;

namespace Practika2_OPAM_Ubohyi_Stanislav
{
    public partial class SortProgram : Window
    {
        private Button? currentSelectedButton;
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ThemeManager –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–º–æ—é
        public bool IsDarkTheme => ThemeManager.IsDarkTheme;

        public SortProgram()
        {
            InitializeComponent();
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é
            NavigateToPage(new HomePage());
            UpdateSelectedButton(HomeButton);
            
            // –ü–æ—á–∞—Ç–∫–æ–≤–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–º–Ω–æ—ó —Ç–µ–º–∏ –∑–∞–º—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–æ—ó
            var mainContentGrid = this.FindControl<Grid>("MainContentGrid");
            if (mainContentGrid != null)
            {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ–º–Ω—É —Ç–µ–º—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                ThemeManager.SetLightTheme(mainContentGrid);
            }
            UpdateThemeUI();
            
            // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø–æ–¥—ñ—ó –Ω–∞–≤–µ–¥–µ–Ω–Ω—è –º–∏—à—ñ –¥–ª—è sidebar
            var sidebar = this.FindControl<Grid>("SidebarMenu");
            if (sidebar != null)
            {
                sidebar.PointerEntered += Sidebar_PointerEntered;
                sidebar.PointerExited += Sidebar_PointerExited;
            }
        }
        
        // –û–±—Ä–æ–±–∫–∞ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è –∫—É—Ä—Å–æ—Ä—É –Ω–∞ sidebar
        private void Sidebar_PointerEntered(object? sender, PointerEventArgs e)
        {
            Debug.WriteLine("Sidebar: Pointer entered");
            if (sender is Grid grid)
            {
                grid.Classes.Add("hover");
            }
        }
        
        // –û–±—Ä–æ–±–∫–∞ –≤–∏—Ö–æ–¥—É –∫—É—Ä—Å–æ—Ä—É –∑ sidebar
        private void Sidebar_PointerExited(object? sender, PointerEventArgs e)
        {
            Debug.WriteLine("Sidebar: Pointer exited");
            if (sender is Grid grid)
            {
                grid.Classes.Remove("hover");
            }
        }

        private void UpdateSelectedButton(Button? newSelectedButton)
        {
            if (newSelectedButton == null) return;

            currentSelectedButton?.Classes.Remove("selected");
            newSelectedButton.Classes.Add("selected");
            currentSelectedButton = newSelectedButton;
        }

        private void NavigateToPage(Control page)
        {
            var pageContent = this.FindControl<ContentControl>("PageContent");
            if (pageContent != null)
            {
                pageContent.Content = page;
            }
        }

        private void MinimizeWindow(object? sender, RoutedEventArgs e) => WindowState = WindowState.Minimized;

        private void MaximizeWindow(object? sender, RoutedEventArgs e) => 
            WindowState = WindowState == WindowState.Maximized ? WindowState.Normal : WindowState.Maximized;

        private void CloseWindow(object? sender, RoutedEventArgs e) => Environment.Exit(0);

        private void NavigateToHome(object? sender, RoutedEventArgs e)
        {
            if (sender is Button button)
            {
                UpdateSelectedButton(button);
                NavigateToPage(new HomePage());
            }
        }

        private void NavigateToSorting(object? sender, RoutedEventArgs e)
        {
            if (sender is Button button)
            {
                UpdateSelectedButton(button);
                NavigateToPage(new SortingAlgorithmsPage());
            }
        }

        private void NavigateToStaticks(object? sender, RoutedEventArgs e)
        {
            if (sender is Button button)
            {
                UpdateSelectedButton(button);
                NavigateToPage(new StatisticsPage());
            }
        }

        private void NavigateToSettings(object? sender, RoutedEventArgs e)
        {
            if (sender is Button button)
            {
                UpdateSelectedButton(button);
                NavigateToPage(new SettingsPage());
            }
        }

        public void ExitButton_Click(object? sender, RoutedEventArgs e)
        {
            Environment.Exit(0);
        }

        private void ToggleTheme(object? sender, RoutedEventArgs e)
        {
            var mainContentGrid = this.FindControl<Grid>("MainContentGrid");
            if (mainContentGrid != null)
            {
                ThemeManager.ToggleTheme(mainContentGrid);
            }
            UpdateThemeUI();
        }

        private void UpdateThemeUI()
        {
            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É —Ç–∞ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ç–µ–º–∏
            var themeIcon = this.FindControl<TextBlock>("ThemeIcon");
            var themeText = this.FindControl<TextBlock>("ThemeText");
            
            if (themeIcon != null && themeText != null)
            {
                if (ThemeManager.IsDarkTheme)
                {
                    themeIcon.Text = "üåô";
                    themeText.Text = "Dark Theme";
                }
                else
                {
                    themeIcon.Text = "‚òÄÔ∏è";
                    themeText.Text = "Light Theme";
                }
            }

            Debug.WriteLine($"Theme changed to {(ThemeManager.IsDarkTheme ? "Dark" : "Light")}");
        }

        // –ü—É–±–ª—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó, —è–∫–∏–π –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∑ —ñ–Ω—à–∏—Ö –∫–ª–∞—Å—ñ–≤
        public void NavigateToPagePublic(Control page)
        {
            NavigateToPage(page);
        }
    }
}