{
  "HomePage_Title": "Sorting Algorithms Visualization",
  "BubbleSort_Name": "Bubble Sort",
  "SelectionSort_Name": "Selection Sort",
  "QuickSort_Name": "Quick Sort",
  "InsertionSort_Name": "Insertion Sort",
  "BubbleSort_Description": "A simple comparison-based algorithm in which each pair of adjacent elements is compared and the elements are swapped if they are not in order.",
  "SelectionSort_Description": "An in-place comparison sort that selects the smallest element from the unsorted list and puts it at the beginning.",
  "QuickSort_Description": "An efficient, divide-and-conquer sorting algorithm that works by selecting a 'pivot' element and partitioning the array around the pivot.",
  "InsertionSort_Description": "A simple sorting algorithm that builds the sorted array one item at a time, similar to how you sort playing cards in your hand.",
  "SettingsPage_Title": "Settings",
  "LanguageSettings_Section": "Language Settings",
  "InterfaceLanguage_Label": "Interface Language",
  "AccountSettings_Section": "Account Settings",
  "Logout_Button": "Logout",
  "VisualizationPage_Settings": "Settings",
  "VisualizationPage_ArraySize": "Array Size:",
  "VisualizationPage_Speed": "Speed:",
  "VisualizationPage_ArrayType": "Array Type:",
  "ArrayType_Random": "Random",
  "ArrayType_AlmostSorted": "Almost sorted",
  "ArrayType_ReverseOrder": "Reversed order",
  "ArrayType_FewUnique": "Few unique elements",
  "Speed_VerySlow": "Very Slow",
  "Speed_Slow": "Slow",
  "Speed_Medium": "Medium",
  "Speed_Fast": "Fast",
  "Speed_VeryFast": "Very Fast",
  "Button_Generate": "Generate",
  "Button_Start": "Start",
  "Button_Pause": "Pause",
  "Button_Step": "Step",
  "Button_Reset": "Reset",
  "Button_Back": "Back to Algorithms List",
  "Button_Next": "Next",
  "Button_LearnMore": "Learn More",
  "Button_TryIt": "Go to try it",
  "BubbleSort_Visualization_Title": "Bubble Sort: Visualization",
  "SelectionSort_Visualization_Title": "Selection Sort: Visualization",
  "QuickSort_Visualization_Title": "Quick Sort: Visualization",
  "InsertionSort_Visualization_Title": "Insertion Sort: Visualization",
  "Stat_Comparisons": "Comparisons",
  "Stat_Swaps": "Swaps",
  "Stat_ExecutionTime": "Execution Time",
  "InfoPage_BubbleSort_Title": "Bubble Sort",
  "InfoPage_SelectionSort_Title": "Selection Sort",
  "InfoPage_QuickSort_Title": "Quick Sort",
  "InfoPage_InsertionSort_Title": "Insertion Sort",
  "BubbleSort_InfoDescription": "Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm starts at the beginning of the data set, comparing the first two elements and swapping them if required. It then moves to the next pair of elements, comparing and swapping them if required. This process is continued until the end of the data set is reached. At this point, the largest element in the data set should be at the end of the data set. The algorithm then repeats the process until the data set is sorted. The algorithm gets its name from the way smaller elements &quot;bubble&quot; to the top of the list. It is one of the simplest sorting algorithms to understand and implement.",
  "SelectionSort_InfoDescription": "Selection sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm starts at the beginning of the data set, comparing the first two elements and swapping them if required. It then moves to the next pair of elements, comparing and swapping them if required. This process is continued until the end of the data set is reached. At this point, the largest element in the data set should be at the end of the data set. The algorithm then repeats the process until the data set is sorted. Selection sort is one of the simplest sorting algorithms to understand and implement.",
  "InsertionSort_InfoDescription": "Insertion sort is a simple sorting algorithm that builds the final sorted array one item at a time. It works by taking elements from the unsorted part and inserting them at their correct position in the sorted part. The algorithm virtually splits the array into a sorted and an unsorted part. Values from the unsorted part are picked and placed in the correct position in the sorted part. It's efficient for small data sets and is often used as part of more sophisticated algorithms. Insertion sort works the way many people sort playing cards in their hands - pick up one card at a time and insert it into the correct position in the sorted section.",
  "QuickSort_InfoDescription": "Quicksort is an efficient sorting algorithm that uses divide-and-conquer technique to sort elements. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The algorithm then recursively sorts the sub-arrays. Quicksort can be implemented in-place, requiring small additional amounts of memory to perform the sorting. It is quite efficient for large datasets and is widely used in practice. Its average time complexity is O(n log n), with worst-case O(n²) when poorly implemented. Its efficiency and relatively simple implementation make it a popular choice among sorting algorithms.",
  "AlgorithmStatistics_Title": "Algorithm Statistics",
  "AlgorithmPerformance_Title": "Algorithm Performance",
  "100-elemnts_Title": "100 elements",
  "AlgorithmComplexity_Title": "Algorithm Complexity",
  "AlgorithmComplexity_BubbleSortDescription": "Simple, but inefficient for large datasets.",
  "AlgorithmComplexity_BubbleSortTime": "Time O(n²)",
  "AlgorithmComplexity_BubleSortSpace": "Space O(1)",
  "AlgorithmComplexity_SelectionSortDescription": "Finds the smallest element in each pass.",
  "AlgorithmComplexity_SelectionSortTime": "Time O(n²)",
  "AlgorithmComplexity_SelectionSortSpace": "Space O(1)",
  "AlgorithmComplexity_QuickSortDescription": "Fastest algorithm for most cases.",
  "AlgorithmComplexity_QuickSortTime": "Time O(n log n)",
  "AlgorithmComplexity_QuickSortSpace": "Space O(log n)",
  "AlgorithmComplexity_InsertionSortDescription": "Efficient for small or nearly sorted data.",
  "AlgorithmComplexity_InsertionSortTime": "Time O(n²)",
  "AlgorithmComplexity_InsertionSortSpace": "Space O(1)",
  "Profile_Title": "User Profile",
  "Profile_UserName": "Name:",
  "Profile_Email": "Email:",
  "Profile_Edit": "Edit",
  "Profile_Logout": "Logout"
}